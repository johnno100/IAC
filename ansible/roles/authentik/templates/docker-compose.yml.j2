# Path: ansible/roles/authentik/templates/docker-compose.yml.j2
---
version: '3.4'

services:
{% if authentik_install_database %}
  postgresql:
    image: postgres:13-alpine
    container_name: {{ authentik_db_container }}
    restart: unless-stopped
    volumes:
      - {{ authentik_db_volume }}:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - {{ authentik_network }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
{% endif %}

{% if authentik_install_redis %}
  redis:
    image: redis:alpine
    container_name: {{ authentik_redis_container }}
    restart: unless-stopped
    networks:
      - {{ authentik_network }}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
{% endif %}

  server:
    image: ghcr.io/goauthentik/server:{{ authentik_version }}
    container_name: {{ authentik_server_container }}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: {{ authentik_db_host }}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING__ENABLED}
      AUTHENTIK_PORT: ${AUTHENTIK_PORT}
      AUTHENTIK_ADMIN_TOKEN: ${AUTHENTIK_ADMIN_TOKEN}
      AUTHENTIK_BOOTSTRAP_EMAIL: ${AUTHENTIK_BOOTSTRAP_EMAIL}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
    volumes:
      - {{ authentik_media_volume }}:/media
      - {{ authentik_templates_volume }}:/templates
    networks:
      - {{ authentik_network }}
    depends_on:
{% if authentik_install_database %}
      - postgresql
{% endif %}
{% if authentik_install_redis %}
      - redis
{% endif %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`{{ authentik_domain }}`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls.certresolver=letsencrypt"
      - "traefik.http.services.authentik.loadbalancer.server.port={{ authentik_port }}"

  worker:
    image: ghcr.io/goauthentik/server:{{ authentik_version }}
    container_name: {{ authentik_worker_container }}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: {{ authentik_db_host }}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING__ENABLED}
      WORKERS: {{ authentik_worker_count }}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    volumes:
      - {{ authentik_media_volume }}:/media
      - {{ authentik_certs_volume }}:/certs
    networks:
      - {{ authentik_network }}
    depends_on:
{% if authentik_install_database %}
      - postgresql
{% endif %}
{% if authentik_install_redis %}
      - redis
{% endif %}

volumes:
  {{ authentik_db_volume }}:
    external: true
  {{ authentik_media_volume }}:
    external: true
  {{ authentik_certs_volume }}:
    external: true
  {{ authentik_templates_volume }}:
    external: true

networks:
  {{ authentik_network }}:
    external: true

